@page "/Products/Edit/{id:int}"

@inject ApplicationDbContext context
@inject NavigationManager navigation





@if (Model is null)
{
    <p class="text-center">
        <em>Produto não encontrado</em>
    </p>
}
else
{
    <h1>@Model.Title (@Model.Id)</h1>
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Nome do Produto</label>
            <InputText @bind-Value="Model.Title" class="form-control" />
            <ValidationMessage For="() => Model.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Preço</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" />
            <ValidationMessage For="() => Model.Price" />
        </div>
        <div class="mb-3">
            <label class="form-label">Categoria</label>
            <InputSelect @bind-Value="Model.CategoryId" class="form-control form-select">
                <option> Selecione</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id"> @category.Title</option>
                }
            </InputSelect>
            <ValidationMessage For="() => Model.CategoryId" />
        </div>

        <button type="submit" class="btn btn-primary">Salvar</button>
        <a href="/Categories" class="btn btn-danger">Cancelar </a>
    </EditForm>
}

@code
{
    [Parameter]
    public int Id { get; set; }
    public Product? Model { get; set; }

    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();
    protected override async Task OnInitializedAsync()
    {

        Model = await context
            .Products
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id) ?? new();

        Categories = await context
        .Categories
        .AsNoTracking()
        .OrderBy(x => x.Title)
        .ToListAsync();
    }

    public async Task OnValidSubmitAsync()
    {
        context.Products.Update(Model);
        await context.SaveChangesAsync();
        navigation.NavigateTo("Products");
    }
}